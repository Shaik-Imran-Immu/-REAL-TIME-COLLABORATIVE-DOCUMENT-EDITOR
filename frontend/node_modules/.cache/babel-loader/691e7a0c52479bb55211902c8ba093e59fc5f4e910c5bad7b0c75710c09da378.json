{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaik\\\\OneDrive\\\\Desktop\\\\T3\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport Quill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { io } from 'socket.io-client';\n\n// Auto-save interval in milliseconds\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SAVE_INTERVAL_MS = 2000;\n\n// Hardcoded document ID for demo. In production, this should be dynamic.\nconst DOCUMENT_ID = \"example-doc-id\";\nfunction App() {\n  _s();\n  const [socket, setSocket] = useState();\n  const [quill, setQuill] = useState();\n\n  // Connect to Socket.IO backend on mount\n  useEffect(() => {\n    const s = io('http://localhost:3001'); // backend URL\n    setSocket(s);\n\n    // Clean up on component unmount\n    return () => s.disconnect();\n  }, []);\n\n  // Load the document once socket and editor are ready\n  useEffect(() => {\n    if (!socket || !quill) return;\n\n    // Listen once for initial content load\n    socket.once('load-document', document => {\n      quill.setContents(document); // Set Quill content\n      quill.enable(); // Allow typing/editing\n    });\n    socket.emit('get-document', DOCUMENT_ID); // Ask server for the document\n  }, [socket, quill]);\n\n  // Listen for remote changes from other users\n  useEffect(() => {\n    if (!socket || !quill) return;\n    const handler = delta => {\n      quill.updateContents(delta); // Apply changes from others\n    };\n    socket.on('receive-changes', handler);\n    return () => socket.off('receive-changes', handler);\n  }, [socket, quill]);\n\n  // When user types, send changes to others\n  useEffect(() => {\n    if (!socket || !quill) return;\n    const handler = (delta, oldDelta, source) => {\n      if (source !== 'user') return; // Only send if user made the change\n      socket.emit('send-changes', delta); // Send to backend\n    };\n    quill.on('text-change', handler);\n    return () => quill.off('text-change', handler);\n  }, [socket, quill]);\n\n  // Auto-save the document every 2 seconds\n  useEffect(() => {\n    if (!socket || !quill) return;\n    const interval = setInterval(() => {\n      socket.emit('save-document', quill.getContents());\n    }, SAVE_INTERVAL_MS);\n    return () => clearInterval(interval);\n  }, [socket, quill]);\n\n  // Initialize Quill and inject into the page\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return;\n    wrapper.innerHTML = \"\"; // Clear container\n    const editor = document.createElement('div'); // Create editor container\n    wrapper.append(editor);\n    const q = new Quill(editor, {\n      theme: 'snow'\n    }); // Create Quill editor\n    q.disable();\n    q.setText(\"Loading...\");\n    setQuill(q); // Save to state\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    ref: wrapperRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"n1rQHUD0QlqhU5JbR+Mna+G+ayk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","useCallback","Quill","io","jsxDEV","_jsxDEV","SAVE_INTERVAL_MS","DOCUMENT_ID","App","_s","socket","setSocket","quill","setQuill","s","disconnect","once","document","setContents","enable","emit","handler","delta","updateContents","on","off","oldDelta","source","interval","setInterval","getContents","clearInterval","wrapperRef","wrapper","innerHTML","editor","createElement","append","q","theme","disable","setText","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaik/OneDrive/Desktop/T3/frontend/src/App.jsx"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport Quill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { io } from 'socket.io-client';\r\n\r\n// Auto-save interval in milliseconds\r\nconst SAVE_INTERVAL_MS = 2000;\r\n\r\n// Hardcoded document ID for demo. In production, this should be dynamic.\r\nconst DOCUMENT_ID = \"example-doc-id\";\r\n\r\nfunction App() {\r\n  const [socket, setSocket] = useState();\r\n  const [quill, setQuill] = useState();\r\n\r\n  // Connect to Socket.IO backend on mount\r\n  useEffect(() => {\r\n    const s = io('http://localhost:3001'); // backend URL\r\n    setSocket(s);\r\n\r\n    // Clean up on component unmount\r\n    return () => s.disconnect();\r\n  }, []);\r\n\r\n  // Load the document once socket and editor are ready\r\n  useEffect(() => {\r\n    if (!socket || !quill) return;\r\n\r\n    // Listen once for initial content load\r\n    socket.once('load-document', document => {\r\n      quill.setContents(document); // Set Quill content\r\n      quill.enable(); // Allow typing/editing\r\n    });\r\n\r\n    socket.emit('get-document', DOCUMENT_ID); // Ask server for the document\r\n  }, [socket, quill]);\r\n\r\n  // Listen for remote changes from other users\r\n  useEffect(() => {\r\n    if (!socket || !quill) return;\r\n\r\n    const handler = (delta) => {\r\n      quill.updateContents(delta); // Apply changes from others\r\n    };\r\n\r\n    socket.on('receive-changes', handler);\r\n\r\n    return () => socket.off('receive-changes', handler);\r\n  }, [socket, quill]);\r\n\r\n  // When user types, send changes to others\r\n  useEffect(() => {\r\n    if (!socket || !quill) return;\r\n\r\n    const handler = (delta, oldDelta, source) => {\r\n      if (source !== 'user') return; // Only send if user made the change\r\n      socket.emit('send-changes', delta); // Send to backend\r\n    };\r\n\r\n    quill.on('text-change', handler);\r\n\r\n    return () => quill.off('text-change', handler);\r\n  }, [socket, quill]);\r\n\r\n  // Auto-save the document every 2 seconds\r\n  useEffect(() => {\r\n    if (!socket || !quill) return;\r\n\r\n    const interval = setInterval(() => {\r\n      socket.emit('save-document', quill.getContents());\r\n    }, SAVE_INTERVAL_MS);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [socket, quill]);\r\n\r\n  // Initialize Quill and inject into the page\r\n  const wrapperRef = useCallback((wrapper) => {\r\n    if (wrapper == null) return;\r\n\r\n    wrapper.innerHTML = \"\"; // Clear container\r\n    const editor = document.createElement('div'); // Create editor container\r\n    wrapper.append(editor);\r\n\r\n    const q = new Quill(editor, { theme: 'snow' }); // Create Quill editor\r\n    q.disable();\r\n    q.setText(\"Loading...\");\r\n\r\n    setQuill(q); // Save to state\r\n  }, []);\r\n\r\n  return <div className=\"container\" ref={wrapperRef}></div>;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}